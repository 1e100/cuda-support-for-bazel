# bazelrc file
# https://docs.bazel.build/versions/master/user-manual.html

# bazel >= 0.18 looks for %workspace%/.bazelrc (which redirects here)
# Older bazel versions look for %workspace%/tools/bazel.rc (this file)
# See https://github.com/bazelbuild/bazel/issues/6319

# +------------------------------------------------------------+
# | Startup Options                                            |
# +------------------------------------------------------------+
startup --batch_cpu_scheduling

startup --host_jvm_args="-XX:-UseParallelGC"
startup --output_user_root="/home/story/.cache/bazel"

# +------------------------------------------------------------+
# | Common Options                                             |
# +------------------------------------------------------------+
common --experimental_repo_remote_exec

# Force bazel output to use colors (good for jenkins) and print useful errors.
common --color=yes

# +------------------------------------------------------------+
# | Test Configurations                                        |
# +------------------------------------------------------------+

# By default prints output only from failed tests.
test --test_output=errors

# +------------------------------------------------------------+
# | CPP Lint Tests & Unit Tests                                |
# +------------------------------------------------------------+
# By default, cpplint tests are run as part of `bazel test` alongside all of
# the other compilation and test targets.  This is a convenience shortcut to
# only do the cpplint testing and nothing else.
# Do bazel test --config=cpplint <target> to enable this configuration.
# To enable the lint test, the BUILD *must* load the cpplint.bzl by having
# 'load("//tools:cpplint.bzl", "cpplint")' at the beginning and 'cpplint()'
# at the end.

test:coverage --copt="--coverage"
test:coverage --cxxopt=--coverage
test:coverage --cxxopt=-fprofile-arcs
test:coverage --cxxopt=-ftest-coverage
test:coverage --linkopt=-coverage
test:coverage --linkopt=-lgcov
test:coverage --linkopt=-lgcc
test:coverage --linkopt=-lc

# +------------------------------------------------------------+
# | Build Configurations                                       |
# +------------------------------------------------------------+

# Specify protobuf cc toolchain

build --show_timestamps

# Work around the sandbox issue.
build --spawn_strategy=standalone

# Do not show warnings from external dependencies.
# build --output_filter="^//"

build --show_timestamps

#build --copt="-Werror=sign-compare"
build --copt="-Werror=return-type"
build --copt="-Werror=unused-variable"
build --copt="-Werror=unused-but-set-variable"
build --copt="-Werror=switch"
build --cxxopt="-Werror=sign-compare"
build --cxxopt="-Werror=reorder"

# This config refers to building with CUDA available. It does not necessarily
# mean that we build CUDA op kernels.

build:using_cuda --define=using_cuda=true
build:using_cuda --action_env TF_NEED_CUDA=1
build:using_cuda --crosstool_top=@local_config_cuda//crosstool:toolchain

# This config refers to building CUDA op kernels with nvcc.
build:cuda --config=using_cuda
build:cuda --define=using_cuda_nvcc=true

# This config refers to building CUDA op kernels with clang.
build:cuda_clang --config=using_cuda
build:cuda_clang --define=using_cuda_clang=true
build:cuda_clang --define=using_clang=true
build:cuda_clang --action_env TF_CUDA_CLANG=1

# Eanble Tensorrt support
build:tensorrt --action_env TF_NEED_TENSORRT=1

# Disable NCCL support by default
build:nonccl --define=no_nccl_support=true

# Build Apollo with C++ 17 features
build:c++17 --cxxopt=-std=c++1z
# build:c++17 --cxxopt=-stdlib=libc++
build:c++1z --config=c++17

# Default paths for TF_SYSTEM_LIBS
build --define=PREFIX=/usr
build --define=LIBDIR=$(PREFIX)/lib
build --define=INCLUDEDIR=$(PREFIX)/include

# Enable C++14
build --cxxopt="-std=c++1y"
build --host_cxxopt="-std=c++1y"

# Enable colorful output of GCC
# build --cxxopt="-fdiagnostics-color=always"

# Instruction set optimizations
build:native_arch_linux --copt=-march=native

# Modular Apollo build options
# build:dynamic_kernels --define=dynamic_loaded_kernels=true
# build:dynamic_kernels --copt=-DAUTOLOAD_DYNAMIC_KERNELS

# Make Bazel print out all options from rc files.
build --announce_rc

# +------------------------------------------------------------+
# | Python Configurations                                      |
# +------------------------------------------------------------+
# run --python_path=/usr/bin/python3
